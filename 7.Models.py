A Django model is a table in your database.
In Django, a model is a Python class that represents a database table. 
Each attribute of the class represents a field in the database table, and each instance of the class represents a row in the table.


Django Models
**************************************************************************************************************************************************

Up until now in this tutorial, output has been static data from Python or HTML templates.

Now we will see how Django allows us to work with data, without having to change or upload files in the prosess.

In Django, data is created in objects, called Models, and is actually tables in a database.



Create Table (Model)
**************************************************************************************************************************************************

To create a model, navigate to the models.py file in the /members/ folder.

Open it, and add a Member table by creating a Member class, and describe the table fields in it:


my_tennis_club/members/models.py:

from django.db import models

class Member(models.Model):
  firstname = models.CharField(max_length=255)
  lastname = models.CharField(max_length=255)
  
  
  
  The first field, firstname, is a Text field, and will contain the first name of the members.

The second field, lastname, is also a Text field, with the member's last name.

Both firstname and lastname is set up to have a maximum of 255 characters.


HERE IS SOME MORE EXPLANATION ABOUT THE FIELDS TO BE INPUT INTO THE COLUMNS OF THE TABLE -> You can get more informarion on this by searching for (django field types) on google , or by going to this website  'https://docs.djangoproject.com/en/4.2/ref/models/fields/'
**************************************************************************************************************************************************


from django.db import models

class Product(models.Model):
    title = models.CharField(max_length =255)# This generates a table with a column of data type of varchar(255)
    description = models.TextField()# This does not have any arguments, so we don't have to set the max number of characters
    price = models.DecimalField(max_digits=6,decimal_places=2)#This two arguments are always required for decimals # Always use decimal for monetary values. FloatFiels() have rounding issues , so always use decimalField
    #DecimalField(6,2) - This means that tis allows a maximaum of 6 digits , two of which are decimal, So the maximum number that can be held by this value is 9999.99. This are six degits, two of which are decimals.
    inventory = models.IntegerField()
    last_update = models.DateTimeField(auto_now =True)# When you put auto_now = true, Djabgo automaticaly saves the current date time, when you update a producti in this field
    first_created = models.DateTimeField(auto_now_add =True)# Django fills in this fieled the first time we create an order



    
    # We don't have an id column for us in this tables.
# This is because django creates them for us automaticaly
# So every entity or model class is going to have a primary key automaticaly called the id field
# But what if we dont want an id field, What if we want another column to be the primary key.
#to do that we just create a colmn and assign it the (primary Key = True) lable
#e.g exam_postion = models.CharField(max_lenght = 10, primary_key = True)  With this, the exam postion is going to be our primary key and django will not creae an id column to be our primary key.
















  
  
  

  
  SQLite Database
**************************************************************************************************************************************************
  
When we created the Django project, we got an empty SQLite database.

It was created in the my_tennis_club root folder, and has the filename db.sqlite3.

By default, all Models created in the Django project will be created as tables in this database.



Migrate
**************************************************************************************************************************************************

Now when we have described a Model in the models.py file, we must run a command to actually create the table in the database.

Navigate to the /my_tennis_club/ folder and run this command:

py manage.py makemigrations members






**************************************************************************************************************************************************


Django creates a file describing the changes and stores the file in the /migrations/ folder:

my_tennis_club/members/migrations/0001_initial.py:

# Generated by Django 4.1.2 on 2022-10-27 11:14

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=255)),
                ('lastname', models.CharField(max_length=255)),
            ],
        ),
    ]



**************************************************************************************************************************************************


Note that Django inserts an id field for your tables, which is an auto increment number
(first record gets the value 1, the second record 2 etc.), this is the default behavior of Django, you can override it by describing your own id field.

The table is not created yet, you will have to run one more command, then Django will create and execute an SQL statement, 
based on the content of the new file in the /migrations/ folder.

Run the migrate command:

py manage.py migrate




Now you have a Member table in you database!





View SQL
**************************************************************************************************************************************************

As a side-note: you can view the SQL statement that were executed from the migration above. All you have to do is to run this command, with the migration number:

py manage.py sqlmigrate members 0001










HERE IS MORE EXPLANATION
*******************************************************************************************************************************************


In Django, a model is a Python class that represents a database table.
Each attribute of the class represents a field in the database table, and each instance of the class represents a row in the table.

Heres an example of how to create a simple model for a blog post:




from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    pub_date = models.DateTimeField(auto_now_add=True)
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)




    
    In this example, the Post model has four fields:

title: a CharField that represents the title of the blog post.
content: a TextField that represents the content of the blog post.
pub_date: a DateTimeField that represents the publication date of the blog post.
  The auto_now_add=True argument ensures that the current date and time are automatically set when a new Post instance is created.
author: a ForeignKey that represents the author of the blog post.
  This field is a reference to the built-in User model in Django's authentication system.







To use this model in your Django application, 
youll need to include it in your apps models.py file and run the following command to create the corresponding database table:


python manage.py makemigrations
python manage.py migrate






These commands will create a database table called myapp_post (assuming your app is called myapp),
with fields that correspond to the attributes of the Post class.

You can then interact with the Post model in your views, templates,
and other parts of your Django application using Djangos powerful ORM (object-relational mapping) system.






















































































....
